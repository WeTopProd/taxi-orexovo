{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Driver/DriverContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { fetchOrdersByDriver } from '../../services/orderService';\nimport { useQuery } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  driverOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true\n};\nconst Context = /*#__PURE__*/createContext(initialValue);\nexport const DriverProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [carId, setCarId] = useState('');\n  const [carNumber, setCarNumber] = useState('');\n  const [driverName, setDriverName] = useState('');\n  const [driverPhone, setDriverPhone] = useState('');\n  const [driverStatus, setDriverStatus] = useState('занят');\n  const {\n    data: driverOrders = []\n  } = useQuery({\n    queryFn: () => fetchOrdersByDriver(carId).then(res => res.data.results),\n    queryKey: [carId],\n    refetchInterval: 3000,\n    retry: 5,\n    onError: error => {\n      console.error(error);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      driverOrders,\n      carId,\n      setCarId,\n      carNumber,\n      setCarNumber,\n      driverName,\n      setDriverName,\n      driverPhone,\n      setDriverPhone,\n      driverStatus,\n      setDriverStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(DriverProvider, \"HhWbQlspgCV0hL+MHFNyRyP3e1A=\", false, function () {\n  return [useQuery];\n});\n_c = DriverProvider;\nexport const useDriverContext = () => {\n  _s2();\n  const context = useContext(Context);\n  if (!context) {\n    throw Error('No Driver context found.');\n  }\n  return context;\n};\n_s2(useDriverContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DriverProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","fetchOrdersByDriver","useQuery","jsxDEV","_jsxDEV","initialValue","driverOrders","isLoading","carsList","isLoadingCars","Context","DriverProvider","_ref","_s","children","carId","setCarId","carNumber","setCarNumber","driverName","setDriverName","driverPhone","setDriverPhone","driverStatus","setDriverStatus","data","queryFn","then","res","results","queryKey","refetchInterval","retry","onError","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDriverContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Driver/DriverContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { fetchOrdersByDriver } from '../../services/orderService';\nimport { useQuery } from '@tanstack/react-query';\n\nconst initialValue = {\n  driverOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true,\n};\n\nconst Context = createContext(initialValue);\n\nexport const DriverProvider = ({ children }) => {\n  const [carId, setCarId] = useState('');\n  const [carNumber, setCarNumber] = useState('');\n  const [driverName, setDriverName] = useState('');\n  const [driverPhone, setDriverPhone] = useState('');\n  const [driverStatus, setDriverStatus] = useState('занят');\n\n  const { data: driverOrders = [] } = useQuery({\n    queryFn: () => fetchOrdersByDriver(carId).then((res) => res.data.results),\n    queryKey: [carId],\n    refetchInterval: 3000,\n    retry: 5,\n    onError: (error) => {\n      console.error(error);\n    },\n  });\n\n  return (\n    <Context.Provider\n      value={{\n        driverOrders,\n        carId,\n        setCarId,\n        carNumber,\n        setCarNumber,\n        driverName,\n        setDriverName,\n        driverPhone,\n        setDriverPhone,\n        driverStatus,\n        setDriverStatus,\n      }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useDriverContext = () => {\n  const context = useContext(Context);\n\n  if (!context) {\n    throw Error('No Driver context found.');\n  }\n\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,QAAQ,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,EAAE;EAChBC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,OAAO,gBAAGZ,aAAa,CAACO,YAAY,CAAC;AAE3C,OAAO,MAAMM,cAAc,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACzC,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,OAAO,CAAC;EAEzD,MAAM;IAAEyB,IAAI,EAAEnB,YAAY,GAAG;EAAG,CAAC,GAAGJ,QAAQ,CAAC;IAC3CwB,OAAO,EAAEA,CAAA,KAAMzB,mBAAmB,CAACc,KAAK,CAAC,CAACY,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC;IACzEC,QAAQ,EAAE,CAACf,KAAK,CAAC;IACjBgB,eAAe,EAAE,IAAI;IACrBC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAGC,KAAK,IAAK;MAClBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC,CAAC;EAEF,oBACE9B,OAAA,CAACM,OAAO,CAAC0B,QAAQ;IACfC,KAAK,EAAE;MACL/B,YAAY;MACZS,KAAK;MACLC,QAAQ;MACRC,SAAS;MACTC,YAAY;MACZC,UAAU;MACVC,aAAa;MACbC,WAAW;MACXC,cAAc;MACdC,YAAY;MACZC;IACF,CAAE;IAAAV,QAAA,EACDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB,CAAC;AAAC5B,EAAA,CAnCWF,cAAc;EAAA,QAOWT,QAAQ;AAAA;AAAAwC,EAAA,GAPjC/B,cAAc;AAqC3B,OAAO,MAAMgC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,OAAO,GAAG9C,UAAU,CAACW,OAAO,CAAC;EAEnC,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAMC,KAAK,CAAC,0BAA0B,CAAC;EACzC;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}