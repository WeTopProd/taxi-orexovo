{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Driver/DriverContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { QueryCars, QueryNewOrders, useQueryCars } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true\n};\nconst Context = /*#__PURE__*/createContext(initialValue);\nexport const DriverProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    data: newOrders = [],\n    isLoading: isLoadingOrders = true\n  } = QueryNewOrders(3000);\n  const {\n    userToken,\n    setUserToken\n  } = useState('');\n\n  // const {data: carsList = [], isLoading: isLoadingCars = true} = QueryCars(3000);\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      newOrders,\n      isLoadingOrders,\n      userToken,\n      setUserToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(DriverProvider, \"QDhME740zjONgxqfKmW89YmozyY=\");\n_c = DriverProvider;\nexport const useDriverContext = () => {\n  _s2();\n  const context = useContext(Context);\n  if (!context) {\n    throw Error('No Driver context found.');\n  }\n  return context;\n};\n_s2(useDriverContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DriverProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","QueryCars","QueryNewOrders","useQueryCars","jsxDEV","_jsxDEV","initialValue","newOrders","isLoading","carsList","isLoadingCars","Context","DriverProvider","_ref","_s","children","data","isLoadingOrders","userToken","setUserToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDriverContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Driver/DriverContext.js"],"sourcesContent":["import React, {createContext, useContext, useState} from 'react';\nimport {QueryCars, QueryNewOrders, useQueryCars} from '../../services/api';\n\n\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true\n}\n\nconst Context = createContext(initialValue)\n\nexport const DriverProvider = ({ children }) => {\n\n  const {data: newOrders = [], isLoading: isLoadingOrders = true} = QueryNewOrders(3000);\n\n  const {userToken, setUserToken} = useState('');\n\n  // const {data: carsList = [], isLoading: isLoadingCars = true} = QueryCars(3000);\n\n  return (\n    <Context.Provider value={{ newOrders, isLoadingOrders, userToken, setUserToken }}>{children}</Context.Provider>\n  )\n}\n\nexport const useDriverContext = () => {\n  const context = useContext(Context)\n\n  if (!context) {\n    throw Error('No Driver context found.')\n  }\n\n  return context\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAGC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAO,OAAO;AAChE,SAAQC,SAAS,EAAEC,cAAc,EAAEC,YAAY,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3E,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,OAAO,gBAAGb,aAAa,CAACQ,YAAY,CAAC;AAE3C,OAAO,MAAMM,cAAc,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAEzC,MAAM;IAACG,IAAI,EAAET,SAAS,GAAG,EAAE;IAAEC,SAAS,EAAES,eAAe,GAAG;EAAI,CAAC,GAAGf,cAAc,CAAC,IAAI,CAAC;EAEtF,MAAM;IAACgB,SAAS;IAAEC;EAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;;EAEA,oBACEK,OAAA,CAACM,OAAO,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEd,SAAS;MAAEU,eAAe;MAAEC,SAAS;MAAEC;IAAa,CAAE;IAAAJ,QAAA,EAAEA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAmB,CAAC;AAEnH,CAAC;AAAAX,EAAA,CAXYF,cAAc;AAAAc,EAAA,GAAdd,cAAc;AAa3B,OAAO,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,OAAO,GAAG9B,UAAU,CAACY,OAAO,CAAC;EAEnC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAMC,KAAK,CAAC,0BAA0B,CAAC;EACzC;EAEA,OAAOD,OAAO;AAChB,CAAC;AAAAD,GAAA,CARYD,gBAAgB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}