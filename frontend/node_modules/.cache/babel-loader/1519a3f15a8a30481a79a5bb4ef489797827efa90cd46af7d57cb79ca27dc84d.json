{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Dispatcher/DispatcherContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { QueryNewOrders } from '../../services/orderService';\nimport { QueryCars } from '../../services/userService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true\n};\nconst Context = /*#__PURE__*/createContext(initialValue);\nexport const DispatcherProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const {\n    data: newOrders = [],\n    isLoading: isLoadingOrders = true\n  } = QueryNewOrders(3000);\n  const {\n    data: carsList = [],\n    isLoading: isLoadingCars = true\n  } = QueryCars(3000);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      newOrders,\n      isLoadingOrders,\n      carsList,\n      isLoadingCars\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = DispatcherProvider;\nexport const useDispatcherContext = () => {\n  _s();\n  const context = useContext(Context);\n  if (!context) {\n    throw Error('No Dispatcher context found.');\n  }\n  return context;\n};\n_s(useDispatcherContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DispatcherProvider\");","map":{"version":3,"names":["React","createContext","useContext","QueryNewOrders","QueryCars","jsxDEV","_jsxDEV","initialValue","newOrders","isLoading","carsList","isLoadingCars","Context","DispatcherProvider","_ref","children","data","isLoadingOrders","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDispatcherContext","_s","context","Error","$RefreshReg$"],"sources":["/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Dispatcher/DispatcherContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { QueryNewOrders } from '../../services/orderService';\nimport { QueryCars } from '../../services/userService';\n\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true,\n};\n\nconst Context = createContext(initialValue);\n\nexport const DispatcherProvider = ({ children }) => {\n  const { data: newOrders = [], isLoading: isLoadingOrders = true } =\n    QueryNewOrders(3000);\n\n  const { data: carsList = [], isLoading: isLoadingCars = true } =\n    QueryCars(3000);\n\n  return (\n    <Context.Provider\n      value={{ newOrders, isLoadingOrders, carsList, isLoadingCars }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useDispatcherContext = () => {\n  const context = useContext(Context);\n\n  if (!context) {\n    throw Error('No Dispatcher context found.');\n  }\n\n  return context;\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,SAAS,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,OAAO,gBAAGX,aAAa,CAACM,YAAY,CAAC;AAE3C,OAAO,MAAMM,kBAAkB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAC7C,MAAM;IAAEE,IAAI,EAAER,SAAS,GAAG,EAAE;IAAEC,SAAS,EAAEQ,eAAe,GAAG;EAAK,CAAC,GAC/Dd,cAAc,CAAC,IAAI,CAAC;EAEtB,MAAM;IAAEa,IAAI,EAAEN,QAAQ,GAAG,EAAE;IAAED,SAAS,EAAEE,aAAa,GAAG;EAAK,CAAC,GAC5DP,SAAS,CAAC,IAAI,CAAC;EAEjB,oBACEE,OAAA,CAACM,OAAO,CAACM,QAAQ;IACfC,KAAK,EAAE;MAAEX,SAAS;MAAES,eAAe;MAAEP,QAAQ;MAAEC;IAAc,CAAE;IAAAI,QAAA,EAC9DA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB,CAAC;AAACC,EAAA,GAbWX,kBAAkB;AAe/B,OAAO,MAAMY,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAMC,OAAO,GAAGzB,UAAU,CAACU,OAAO,CAAC;EAEnC,IAAI,CAACe,OAAO,EAAE;IACZ,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC7C;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CARWD,oBAAoB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}