{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useQuery } from '@tanstack/react-query';\nimport { HOST } from './api';\nconst BASE_URL_ORDERS = `${HOST}/orders/`;\nconst BASE_URL_USERS = `${HOST}/users/`;\nexport async function fetchOrdersByPage() {\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return await axios.get(BASE_URL_ORDERS, {\n    params: {\n      page: page\n    }\n  });\n}\nexport async function fetchOrdersByDriver(carId) {\n  return await axios.get(BASE_URL_ORDERS + `${carId}/`);\n}\nexport const fetchNewOrders = function () {\n  let status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return axios.get(BASE_URL_ORDERS, {\n    params: {\n      status: status\n    }\n  }).then(_ref => {\n    let {\n      data\n    } = _ref;\n    return data === null || data === void 0 ? void 0 : data.results;\n  });\n};\nexport async function submitOrder(data) {\n  return await axios.post(BASE_URL_ORDERS, data);\n}\nexport const QueryNewOrders = time => {\n  _s();\n  return useQuery({\n    queryFn: () => fetchNewOrders('new'),\n    queryKey: ['newOrders'],\n    refetchInterval: time,\n    retry: 5,\n    onError: error => {\n      console.error(error);\n    }\n  });\n};\n_s(QueryNewOrders, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n_c = QueryNewOrders;\nexport async function changeOrderStatus(order_id, order_status) {\n  return await axios.patch(BASE_URL_ORDERS + `${order_id}/`, {\n    status: order_status\n  });\n}\nexport async function orderRequestByDispatcher(order_id, driver_id) {\n  return await axios.patch(BASE_URL_ORDERS + `${order_id}/`, {\n    driver: driver_id\n  });\n}\nexport async function changeDriverStatus(driver_id, status) {\n  return await axios.patch(BASE_URL_USERS + `${driver_id}/`, {\n    status: status\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"QueryNewOrders\");","map":{"version":3,"names":["axios","useQuery","HOST","BASE_URL_ORDERS","BASE_URL_USERS","fetchOrdersByPage","page","arguments","length","undefined","get","params","fetchOrdersByDriver","carId","fetchNewOrders","status","then","_ref","data","results","submitOrder","post","QueryNewOrders","time","_s","queryFn","queryKey","refetchInterval","retry","onError","error","console","_c","changeOrderStatus","order_id","order_status","patch","orderRequestByDispatcher","driver_id","driver","changeDriverStatus","$RefreshReg$"],"sources":["/Users/admin/Desktop/projects/wetop/taxi/frontend/src/services/orderService.js"],"sourcesContent":["import axios from 'axios';\nimport { useQuery } from '@tanstack/react-query';\nimport { HOST } from './api';\n\nconst BASE_URL_ORDERS = `${HOST}/orders/`;\nconst BASE_URL_USERS = `${HOST}/users/`;\n\nexport async function fetchOrdersByPage(page = 1) {\n  return await axios.get(BASE_URL_ORDERS, {\n    params: {\n      page: page,\n    },\n  });\n}\n\nexport async function fetchOrdersByDriver(carId) {\n  return await axios.get(BASE_URL_ORDERS + `${carId}/`);\n}\n\nexport const fetchNewOrders = (status = '') =>\n  axios\n    .get(BASE_URL_ORDERS, {\n      params: {\n        status: status,\n      },\n    })\n    .then(({ data }) => data?.results);\n\nexport async function submitOrder(data) {\n  return await axios.post(BASE_URL_ORDERS, data);\n}\n\nexport const QueryNewOrders = (time) =>\n  useQuery({\n    queryFn: () => fetchNewOrders('new'),\n    queryKey: ['newOrders'],\n    refetchInterval: time,\n    retry: 5,\n    onError: (error) => {\n      console.error(error);\n    },\n  });\n\nexport async function changeOrderStatus(order_id, order_status) {\n  return await axios.patch(BASE_URL_ORDERS + `${order_id}/`, {\n    status: order_status,\n  });\n}\n\nexport async function orderRequestByDispatcher(order_id, driver_id) {\n  return await axios.patch(BASE_URL_ORDERS + `${order_id}/`, {\n    driver: driver_id,\n  });\n}\n\nexport async function changeDriverStatus(driver_id, status) {\n  return await axios.patch(BASE_URL_USERS + `${driver_id}/`, {\n    status: status,\n  });\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,IAAI,QAAQ,OAAO;AAE5B,MAAMC,eAAe,GAAI,GAAED,IAAK,UAAS;AACzC,MAAME,cAAc,GAAI,GAAEF,IAAK,SAAQ;AAEvC,OAAO,eAAeG,iBAAiBA,CAAA,EAAW;EAAA,IAAVC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC9C,OAAO,MAAMP,KAAK,CAACU,GAAG,CAACP,eAAe,EAAE;IACtCQ,MAAM,EAAE;MACNL,IAAI,EAAEA;IACR;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeM,mBAAmBA,CAACC,KAAK,EAAE;EAC/C,OAAO,MAAMb,KAAK,CAACU,GAAG,CAACP,eAAe,GAAI,GAAEU,KAAM,GAAE,CAAC;AACvD;AAEA,OAAO,MAAMC,cAAc,GAAG,SAAAA,CAAA;EAAA,IAACC,MAAM,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OACxCP,KAAK,CACFU,GAAG,CAACP,eAAe,EAAE;IACpBQ,MAAM,EAAE;MACNI,MAAM,EAAEA;IACV;EACF,CAAC,CAAC,CACDC,IAAI,CAACC,IAAA;IAAA,IAAC;MAAEC;IAAK,CAAC,GAAAD,IAAA;IAAA,OAAKC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,OAAO;EAAA,EAAC;AAAA;AAEtC,OAAO,eAAeC,WAAWA,CAACF,IAAI,EAAE;EACtC,OAAO,MAAMlB,KAAK,CAACqB,IAAI,CAAClB,eAAe,EAAEe,IAAI,CAAC;AAChD;AAEA,OAAO,MAAMI,cAAc,GAAIC,IAAI;EAAAC,EAAA;EAAA,OACjCvB,QAAQ,CAAC;IACPwB,OAAO,EAAEA,CAAA,KAAMX,cAAc,CAAC,KAAK,CAAC;IACpCY,QAAQ,EAAE,CAAC,WAAW,CAAC;IACvBC,eAAe,EAAEJ,IAAI;IACrBK,KAAK,EAAE,CAAC;IACRC,OAAO,EAAGC,KAAK,IAAK;MAClBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC,CAAC;AAAA;AAACN,EAAA,CATQF,cAAc;EAAA,QACzBrB,QAAQ;AAAA;AAAA+B,EAAA,GADGV,cAAc;AAW3B,OAAO,eAAeW,iBAAiBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC9D,OAAO,MAAMnC,KAAK,CAACoC,KAAK,CAACjC,eAAe,GAAI,GAAE+B,QAAS,GAAE,EAAE;IACzDnB,MAAM,EAAEoB;EACV,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeE,wBAAwBA,CAACH,QAAQ,EAAEI,SAAS,EAAE;EAClE,OAAO,MAAMtC,KAAK,CAACoC,KAAK,CAACjC,eAAe,GAAI,GAAE+B,QAAS,GAAE,EAAE;IACzDK,MAAM,EAAED;EACV,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeE,kBAAkBA,CAACF,SAAS,EAAEvB,MAAM,EAAE;EAC1D,OAAO,MAAMf,KAAK,CAACoC,KAAK,CAAChC,cAAc,GAAI,GAAEkC,SAAU,GAAE,EAAE;IACzDvB,MAAM,EAAEA;EACV,CAAC,CAAC;AACJ;AAAC,IAAAiB,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}