{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Dispatcher/DispatcherContext.js\",\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { fetchNewOrders, fetchOrdersByPage, QueryNewOrders } from '../../services/orderService';\nimport { QueryCars } from '../../services/userService';\nimport { useQuery } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true\n};\nconst Context = /*#__PURE__*/createContext(initialValue);\nexport const DispatcherProvider = _ref => {\n  var _s = $RefreshSig$();\n  let {\n    children\n  } = _ref;\n  const QueryOrdersByPage = time => {\n    _s();\n    return useQuery({\n      queryFn: () => fetchOrdersByPage(),\n      queryKey: ['ordersDispatcher'],\n      refetchInterval: time,\n      retry: 5,\n      onError: error => {\n        console.error(error);\n      }\n    });\n  };\n  _s(QueryOrdersByPage, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [useQuery];\n  });\n  const {\n    data: newOrders = [],\n    isLoading: isLoadingOrders = true\n  } = QueryOrdersByPage(3000);\n  const {\n    data: carsList = [],\n    isLoading: isLoadingCars = true\n  } = QueryCars(3000);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      newOrders,\n      isLoadingOrders,\n      carsList,\n      isLoadingCars\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = DispatcherProvider;\nexport const useDispatcherContext = () => {\n  _s2();\n  const context = useContext(Context);\n  if (!context) {\n    throw Error('No Dispatcher context found.');\n  }\n  return context;\n};\n_s2(useDispatcherContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DispatcherProvider\");","map":{"version":3,"names":["React","createContext","useContext","fetchNewOrders","fetchOrdersByPage","QueryNewOrders","QueryCars","useQuery","jsxDEV","_jsxDEV","initialValue","newOrders","isLoading","carsList","isLoadingCars","Context","DispatcherProvider","_ref","_s","$RefreshSig$","children","QueryOrdersByPage","time","queryFn","queryKey","refetchInterval","retry","onError","error","console","data","isLoadingOrders","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDispatcherContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/admin/Desktop/projects/wetop/taxi/frontend/src/pages/Dispatcher/DispatcherContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport {\n  fetchNewOrders,\n  fetchOrdersByPage,\n  QueryNewOrders,\n} from '../../services/orderService';\nimport { QueryCars } from '../../services/userService';\nimport { useQuery } from '@tanstack/react-query';\n\nconst initialValue = {\n  newOrders: [],\n  isLoading: true,\n  carsList: [],\n  isLoadingCars: true,\n};\n\nconst Context = createContext(initialValue);\n\nexport const DispatcherProvider = ({ children }) => {\n  const QueryOrdersByPage = (time) =>\n    useQuery({\n      queryFn: () => fetchOrdersByPage(),\n      queryKey: ['ordersDispatcher'],\n      refetchInterval: time,\n      retry: 5,\n      onError: (error) => {\n        console.error(error);\n      },\n    });\n\n  const { data: newOrders = [], isLoading: isLoadingOrders = true } =\n    QueryOrdersByPage(3000);\n\n  const { data: carsList = [], isLoading: isLoadingCars = true } =\n    QueryCars(3000);\n\n  return (\n    <Context.Provider\n      value={{ newOrders, isLoadingOrders, carsList, isLoadingCars }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useDispatcherContext = () => {\n  const context = useContext(Context);\n\n  if (!context) {\n    throw Error('No Dispatcher context found.');\n  }\n\n  return context;\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SACEC,cAAc,EACdC,iBAAiB,EACjBC,cAAc,QACT,6BAA6B;AACpC,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,QAAQ,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,OAAO,gBAAGd,aAAa,CAACS,YAAY,CAAC;AAE3C,OAAO,MAAMM,kBAAkB,GAAGC,IAAA,IAAkB;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAH,IAAA;EAC7C,MAAMI,iBAAiB,GAAIC,IAAI;IAAAJ,EAAA;IAAA,OAC7BX,QAAQ,CAAC;MACPgB,OAAO,EAAEA,CAAA,KAAMnB,iBAAiB,CAAC,CAAC;MAClCoB,QAAQ,EAAE,CAAC,kBAAkB,CAAC;MAC9BC,eAAe,EAAEH,IAAI;MACrBI,KAAK,EAAE,CAAC;MACRC,OAAO,EAAGC,KAAK,IAAK;QAClBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;EAAA;EAACV,EAAA,CATCG,iBAAiB;IAAA,QACrBd,QAAQ;EAAA;EAUV,MAAM;IAAEuB,IAAI,EAAEnB,SAAS,GAAG,EAAE;IAAEC,SAAS,EAAEmB,eAAe,GAAG;EAAK,CAAC,GAC/DV,iBAAiB,CAAC,IAAI,CAAC;EAEzB,MAAM;IAAES,IAAI,EAAEjB,QAAQ,GAAG,EAAE;IAAED,SAAS,EAAEE,aAAa,GAAG;EAAK,CAAC,GAC5DR,SAAS,CAAC,IAAI,CAAC;EAEjB,oBACEG,OAAA,CAACM,OAAO,CAACiB,QAAQ;IACfC,KAAK,EAAE;MAAEtB,SAAS;MAAEoB,eAAe;MAAElB,QAAQ;MAAEC;IAAc,CAAE;IAAAM,QAAA,EAC9DA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB,CAAC;AAACC,EAAA,GAxBWtB,kBAAkB;AA0B/B,OAAO,MAAMuB,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACxC,MAAMC,OAAO,GAAGvC,UAAU,CAACa,OAAO,CAAC;EAEnC,IAAI,CAAC0B,OAAO,EAAE;IACZ,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC7C;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,oBAAoB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}